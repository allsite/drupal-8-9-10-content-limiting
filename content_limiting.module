<?php

/**
 * @file
 * Contains content_limiting.module functions.
 */

use Drupal\Core\Url;
use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\node\Entity\NodeType;


/**
 * Implements hook_help().
 */
function content_limiting_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.content_limiting':
      $output = '';
      $output .= '<h1>' . t('Content Limiting') . '</h1>';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Content Limiting provides options for limiting the scope of content for content types. After enabling limiting the content<br> 
      type will be restricted to retain a specific amount of content pieces. When a content piece is added that exceeds the limit,<br>
      Content Limiting will delete as many items needed to enforce the set limit.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Enable limiting') . '</dt>';
      $output .= '<dd>' . t('You need to activate Content Limiting on the <em>Edit</em> page for the content type you want to use it on: <a href=":content-types">/admin/structure/types/manage/</a>[node_type].', [':content-types' => Url::fromRoute('entity.node_type.collection')->toString()]) . '</dd>';
      $output .= '<dd>' . t('Under the tab "Content Limiting" there is an option to enable limiting.') . '</dd>';
      $output .= '<dt>' . t('Maximum pieces of content to retain') . '</dt>';
      $output .= '<dd>' . t('Choose maximum amount of content pieces will be saved at any given time.') . '</dd>';
      $output .= '<dt>' . t('Log deletions') . '</dt>';
      $output .= '<dd>' . t('Create a watchdog entry while deleting content items.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function content_limiting_form_node_type_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  content_limiting_node_type_form($form, $form_state, $form_id);
}

function content_limiting_form_node_type_add_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  content_limiting_node_type_form($form, $form_state, $form_id);
  
}

function content_limiting_node_type_form(&$form, FormStateInterface $form_state, $form_id) {

  $node_type = $form_state->getFormObject()->getEntity();
  
  $type = $form['type']['#default_value'];
  echo $type;
  $entityFieldManager = \Drupal::service('entity_field.manager');
  $fields = $entityFieldManager->getFieldDefinitions('node', $node_type->id());

  $contentFields = [];
  foreach ($fields as $field) {
    if ($field instanceof BaseFieldDefinition) {
      continue;
    }
    if (strpos($field->getType(), 'text') === 0 || strpos($field->getType(), 'string') === 0) {
      $contentFields[$field->getName()] = $field->getLabel();
    }
  }

  $form['content_limiting'] = [
    '#type' => 'details',
    '#title' => t('Content Limiting'),
    '#group' => 'additional_settings',
    '#open' => TRUE,
  ];

  $form['content_limiting']['content_limiting_enable'] = [
    '#type' => 'checkbox',
    '#title' => t('Enable limiting'),
    '#description' => t('Enable to enforce the maximum pieces of content to be retained.'),
    '#default_value' => $node_type->getThirdPartySetting('content_limiting', 'content_limiting_enable_' . $type, FALSE),
  ];
  $form['content_limiting']['content_limiting_limit'] = [
    '#type' => 'number',
    '#title' => t('Maximum pieces of content to retain'),
    '#description' => t('Upon reaching the limit new pieces of content saved will result in deletion of the necessary amount to enforce the limit.<br><b>Warning: Deleting many pieces of content may affect system performance.</b>'),
    '#default_value' => $node_type->getThirdPartySetting('content_limiting', 'content_limiting_limit_' . $type, FALSE),
  ];
  $form['content_limiting']['content_limiting_logs'] = [
    '#type' => 'checkbox',
    '#title' => t('Log deletions'),
    '#description' => t('Create a watchdog entry while deleting content items.'),
    '#default_value' => $node_type->getThirdPartySetting('content_limiting', 'content_limiting_logs_' . $type, FALSE),
  ];

  $form['actions']['submit']['#submit'][] = 'content_limiting_node_type_form_submit';
}


function content_limiting_node_type_form_submit(&$form, FormStateInterface $form_state) {
  $form_settings = $form_state->getStorage();
  $type = $form_settings['machine_name.initial_values']['type'];
  $enable_content_limiting = (bool) $form_state->getValue('content_limiting_enable');
  $node_type = $form_state->getFormObject()->getEntity(); 
  $node_type->setThirdPartySetting('content_limiting', 'content_limiting_enable_' . $type, $enable_content_limiting);
  $node_type->setThirdPartySetting('content_limiting', 'content_limiting_limit_' . $type, $form_state->getValue('content_limiting_limit'));
  $node_type->setThirdPartySetting('content_limiting', 'content_limiting_logs_' . $type, $form_state->getValue('content_limiting_logs'));
  $node_type->save();
}


function content_limiting_node_presave(EntityInterface $entity) {
  if ($entity->isNew()) {
    $node_type = NodeType::load($entity->bundle());
    $type = $entity->bundle();
    $enable = $node_type->getThirdPartySetting('content_limiting', 'content_limiting_enable_' . $type, FALSE);
    $limit = $node_type->getThirdPartySetting('content_limiting', 'content_limiting_limit_' . $type, FALSE);
    $logs = $node_type->getThirdPartySetting('content_limiting', 'content_limiting_logs_' . $type, FALSE);
    
    if($enable == 1 && $limit > 0) {
      $limit = $limit - 1; // offset the saved node
      $query = \Drupal::entityQuery('node')->condition('type', $type);         
      $counter = $query->count()->execute();

      if($counter > $limit) {
        $removenodes = \Drupal::entityQuery('node');
        $removenodes->condition('type', 'deposit');
        $nodes = $removenodes->execute();
        $delete_quantity = $counter - $limit; // quantity to delete
        $nodes_delete = array_slice($nodes, 0, $delete_quantity);
        $nodes_delete = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nodes_delete);
        foreach ($nodes_delete as $delete_node) {
            $delete_node->delete();
        }
        if($logs == 1) {
          $message = 'content items deleted: (' . $delete_quantity . ')';
          \Drupal::logger('content_limiting')->info($message);
        }
      }  
    }
  } // end isNew check
} // end function